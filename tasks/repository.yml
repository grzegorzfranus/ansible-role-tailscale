---
# =============================================================================
# Ansible Role: Tailscale - Repository Tasks
# =============================================================================
# This file handles the configuration of package repositories required for
# Tailscale installation. It sets up proper GPG keys and repository sources
# based on the target operating system and uses smart key management detection.
#
# Flow:
# 1. Create Required Directories
# 2. Smart GPG Key Management (Legacy vs Keyring)
# 3. Fetch Repository Configuration
# 4. Configure Repository Sources
#
# The role dynamically configures repositories using the detected key method
# and track selection, following the official Tailscale installer logic.
# =============================================================================

# -----------------------------------------------------------------------------
# 1. Create Required Directories
# -----------------------------------------------------------------------------
- name: 🔧 Tailscale | repository | Create keyrings directory
  become: true
  ansible.builtin.file:
    path: "/usr/share/keyrings"
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: 🔧 Tailscale | repository | Create sources.list.d directory
  become: true
  ansible.builtin.file:
    path: "/etc/apt/sources.list.d"
    state: directory
    mode: '0755'
    owner: root
    group: root

# -----------------------------------------------------------------------------
# 2. Smart GPG Key Management (Legacy vs Keyring)
# -----------------------------------------------------------------------------
- name: 🔍 Tailscale | repository | Check if gnupg is needed for legacy method
  ansible.builtin.package:
    name: gnupg
    state: present
  become: true
  when: >
    _tailscale_detected_key_method == 'legacy' and
    'gnupg' not in ansible_facts.packages | default({})

- name: 🔑 Tailscale | repository | Add repository key (Legacy Method)
  become: true
  ansible.builtin.get_url:
    url: "{{ tailscale_repo_key_url }}"
    dest: "/tmp/tailscale-key.asc"
    mode: '0644'
  register: _tailscale_legacy_key_download
  when: >
    _tailscale_detected_key_method == 'legacy'

- name: 🔑 Tailscale | repository | Install downloaded key (Legacy Method)
  become: true
  ansible.builtin.shell: |
    set -o pipefail
    apt-key add /tmp/tailscale-key.asc
  args:
    executable: /bin/bash
  register: _tailscale_legacy_key_result
  changed_when: "'OK' in _tailscale_legacy_key_result.stdout"
  when: >
    _tailscale_detected_key_method == 'legacy'

- name: 🧹 Tailscale | repository | Clean up temporary key file
  become: true
  ansible.builtin.file:
    path: "/tmp/tailscale-key.asc"
    state: absent
  when: >
    _tailscale_detected_key_method == 'legacy'

- name: 🔑 Tailscale | repository | Add repository key (Keyring Method)
  become: true
  ansible.builtin.get_url:
    url: "{{ tailscale_repo_key_url }}"
    dest: "{{ tailscale_repo_key_path }}"
    mode: '0644'
    owner: root
    group: root
  when: >
    _tailscale_detected_key_method == 'keyring'

# -----------------------------------------------------------------------------
# 3. Fetch Repository Configuration
# -----------------------------------------------------------------------------
- name: 🔍 Tailscale | repository | Fetch repository list file content
  ansible.builtin.uri:
    url: "{{ tailscale_repo_list_url }}"
    return_content: true
    timeout: "{{ tailscale_connectivity_timeout }}"
  register: repo_list_content
  when: >
    (ansible_distribution == 'Ubuntu' and ansible_distribution_version == '24.04') or
    (ansible_distribution == 'Debian' and ansible_distribution_major_version == '12')

- name: 🔍 Tailscale | repository | Extract deb line from repository list
  ansible.builtin.set_fact:
    tailscale_repo_line: "{{ repo_list_content.content | regex_search('deb .+') }}"
  when: >
    ((ansible_distribution == 'Ubuntu' and ansible_distribution_version == '24.04') or
     (ansible_distribution == 'Debian' and ansible_distribution_major_version == '12')) and
    repo_list_content is defined and repo_list_content.content is defined

# -----------------------------------------------------------------------------
# 4. Configure Repository Sources
# -----------------------------------------------------------------------------
- name: 🔧 Tailscale | repository | Add repository from fetched content (Legacy)
  become: true
  ansible.builtin.copy:
    content: "{{ repo_list_content.content }}"
    dest: "/etc/apt/sources.list.d/tailscale.list"
    mode: '0644'
    owner: root
    group: root
  when: >
    ((ansible_distribution == 'Ubuntu' and ansible_distribution_version == '24.04') or
     (ansible_distribution == 'Debian' and ansible_distribution_major_version == '12')) and
    _tailscale_detected_key_method == 'legacy' and
    tailscale_repo_line is defined and tailscale_repo_line != ''

- name: 🔧 Tailscale | repository | Add repository from fetched content (Keyring)
  become: true
  ansible.builtin.copy:
    content: "{{ repo_list_content.content }}"
    dest: "/etc/apt/sources.list.d/tailscale.list"
    mode: '0644'
    owner: root
    group: root
  when: >
    ((ansible_distribution == 'Ubuntu' and ansible_distribution_version == '24.04') or
     (ansible_distribution == 'Debian' and ansible_distribution_major_version == '12')) and
    _tailscale_detected_key_method == 'keyring' and
    tailscale_repo_line is defined and tailscale_repo_line != ''

# -----------------------------------------------------------------------------
# 5. Update Package Cache
# -----------------------------------------------------------------------------
- name: 🔄 Tailscale | repository | Update package cache
  become: true
  ansible.builtin.apt:
    update_cache: true
    cache_valid_time: 0
  register: _tailscale_cache_update
  retries: 3
  delay: 5
  until: _tailscale_cache_update is succeeded

# -----------------------------------------------------------------------------
# 6. Verification
# -----------------------------------------------------------------------------
- name: 🔍 Tailscale | repository | Verify repository configuration
  ansible.builtin.command: "apt-cache policy tailscale"
  register: _tailscale_repo_verification
  changed_when: false
  failed_when:
    - _tailscale_repo_verification.rc != 0
    - "'No packages found' in _tailscale_repo_verification.stderr"

- name: 📋 Tailscale | repository | Display repository verification
  ansible.builtin.debug:
    msg:
      - "🎯 Repository Configuration Completed Successfully:"
      - "   GPG Key Method: {{ _tailscale_detected_key_method }}"
      - "   Repository URL: {{ tailscale_repo_list_url }}"
      - "   Key Path: {{ tailscale_repo_key_path if _tailscale_detected_key_method == 'keyring' else 'apt-key (legacy)' }}"
      - "   Track: {{ tailscale_track }}"
      - "   Package Available: {{ 'Yes' if _tailscale_repo_verification.rc == 0 else 'Check Failed' }}"
  when: >
    tailscale_collect_system_info | bool
