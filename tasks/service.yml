---
# =============================================================================
# Ansible Role: Tailscale - Service Tasks
# =============================================================================
# This file handles the configuration of the Tailscale service startup behavior
# on the target system. It uses smart detection to determine the optimal
# service management approach and handles special distribution requirements.
#
# Flow:
# 1. Service Manager Detection
# 2. Configure Service Startup Behavior
# 3. Handle Immediate Start Requirements
# 4. Service Verification
#
# The role automatically detects service management requirements and applies
# distribution-specific configurations as needed.
# =============================================================================

# -----------------------------------------------------------------------------
# 1. Service Manager Detection
# -----------------------------------------------------------------------------
- name: 🔍 Tailscale | service | Detect optimal service manager
  ansible.builtin.set_fact:
    _tailscale_service_manager: >-
      {%- if tailscale_service_manager == 'auto' -%}
        {{ ansible_service_mgr }}
      {%- else -%}
        {{ tailscale_service_manager }}
      {%- endif -%}

- name: 📋 Tailscale | service | Display service management configuration
  ansible.builtin.debug:
    msg:
      - "🔧 Service Management Configuration:"
      - "   Service Manager: {{ _tailscale_service_manager }}"
      - "   Service Enabled: {{ tailscale_service_enabled }}"
      - "   Immediate Start Required: {{ _tailscale_detected_immediate_start }}"
      - "   Service Name: {{ tailscale_service_name }}"

# -----------------------------------------------------------------------------
# 2. Configure Service Startup Behavior (systemd)
# -----------------------------------------------------------------------------
- name: 🔧 Tailscale | service | Configure Tailscale service startup (systemd)
  become: true
  ansible.builtin.systemd:
    name: "{{ tailscale_service_name }}"
    enabled: "{{ tailscale_service_enabled }}"
    daemon_reload: true
  notify: 🔄 Tailscale | handlers | Restart Tailscale service
  when: >
    _tailscale_service_manager == 'systemd'

# -----------------------------------------------------------------------------
# 3. Handle Immediate Start Requirements
# -----------------------------------------------------------------------------
- name: 🚀 Tailscale | service | Start service immediately (Special Distributions)
  become: true
  ansible.builtin.systemd:
    name: "{{ tailscale_service_name }}"
    state: started
    enabled: true
  when: >
    _tailscale_service_manager == 'systemd' and
    _tailscale_detected_immediate_start | bool and
    tailscale_service_enabled | bool

- name: 📋 Tailscale | service | Log immediate start action
  ansible.builtin.debug:
    msg: "🚀 Started {{ tailscale_service_name }} immediately due to distribution requirements ({{ ansible_distribution }})"
  when: >
    _tailscale_detected_immediate_start | bool and
    tailscale_service_enabled | bool

# -----------------------------------------------------------------------------
# 4. Alternative Service Managers
# -----------------------------------------------------------------------------
# Pruned non-systemd managers due to role's OS scope

# -----------------------------------------------------------------------------
# 5. Service Verification
# -----------------------------------------------------------------------------
- name: 🔍 Tailscale | service | Verify service configuration (systemd)
  ansible.builtin.systemd:
    name: "{{ tailscale_service_name }}"
  register: _tailscale_service_status
  failed_when: false
  when: >
    _tailscale_service_manager == 'systemd'

- name: 🔍 Tailscale | service | Check service status (OpenRC)
  ansible.builtin.command: "rc-service {{ tailscale_service_name }} status"
  register: _tailscale_openrc_status
  failed_when: false
  changed_when: false
  when: >
    _tailscale_service_manager == 'openrc'

# -----------------------------------------------------------------------------
# 6. Status Reporting
# -----------------------------------------------------------------------------
- name: 📊 Tailscale | service | Report service configuration status
  ansible.builtin.debug:
    msg:
      - "✅ Tailscale Service Configuration Completed:"
      - "   Service Manager: {{ _tailscale_service_manager }}"
      - >-
        Service Status: {{
          _tailscale_service_status.status.ActiveState | default('unknown')
          if _tailscale_service_manager == 'systemd'
          else _tailscale_openrc_status.stdout | default('unknown')
        }}
      - "   Enabled at Boot: {{ tailscale_service_enabled }}"
      - "   Immediate Start Applied: {{ _tailscale_detected_immediate_start }}"
  when: >
    tailscale_collect_system_info | bool

# -----------------------------------------------------------------------------
# 7. Error Handling with Enhanced Reporting
# -----------------------------------------------------------------------------
- name: 🚨 Tailscale | service | Handle service configuration errors
  ansible.builtin.include_tasks: error_reporting.yml
  when:
    - tailscale_enhanced_error_reporting | bool
    - >
      (_tailscale_service_status is defined and _tailscale_service_status.failed | default(false)) or
      (_tailscale_openrc_result is defined and _tailscale_openrc_result.rc is defined and _tailscale_openrc_result.rc != 0) or
      (_tailscale_openrc_start is defined and _tailscale_openrc_start.rc is defined and _tailscale_openrc_start.rc != 0)
